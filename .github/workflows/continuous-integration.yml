name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:
    types: [ opened, synchronize, reopened ]

env:
  fail-fast: true

jobs:
  checks:
    name: Code Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3
          coverage: none
          extensions: filter
          tools: composer-dependency-analyser, composer-normalize, composer-require-checker

      - name: Install Composer Dependencies
        uses: ramsey/composer-install@v3
        with:
          dependency-versions: "highest"
          composer-options: "--prefer-stable --optimize-autoloader --no-progress --no-interaction"

      - name: Run Composer Dependency Analyser
        run: composer-dependency-analyser

      - name: Run Composer Require Checker
        run: composer-require-checker

      - name: Run Composer Normalize
        run: composer-normalize --dry-run --indent-size 2 --indent-style space --no-check-lock --no-update-lock

      - name: Run PHP CS Fixer
        run: vendor/bin/php-cs-fixer check --using-cache=no --config vendor/kununu/scripts/src/PHP/CodeStandards/Scripts/php_cs src/ tests/

      - name: Run Rector
        run: vendor/bin/rector process --ansi --dry-run --config rector-ci.php src/ tests/

      - name: Run PHPStan
        run: vendor/bin/phpstan analyse --ansi

  build:
    needs: checks
    name: PHPUnit
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version:
          - 8.3
          - 8.4
        mysql-version:
          - 8.0
        elasticsearch-version:
          - 7.9.3
        opensearch-version:
          - 2.18.0
        dependencies:
          - highest

    services:
      mysql:
        image: mysql:${{ matrix.mysql-version }}
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: ${{ secrets.CI_DATABASE_PASSWORD }}
          MYSQL_DATABASE: root
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      elasticsearch:
        image: elasticsearch:${{ matrix.elasticsearch-version }}
        env:
          discovery.type: single-node
        options: >-
          --health-cmd "curl http://localhost:9200/_cluster/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 9200:9200

      opensearch:
        image: opensearchproject/opensearch:${{ matrix.opensearch-version }}
        env:
          bootstrap.memory_lock: true
          cluster.routing.allocation.disk.threshold_enabled: false
          discovery.type: single-node
          http.port: 9201
          DISABLE_INSTALL_DEMO_CONFIG: true
          DISABLE_SECURITY_PLUGIN: true
          OPENSEARCH_JAVA_OPTS: -Xms512m -Xmx512m
        options: >-
          --health-cmd "curl http://localhost:9201/_cluster/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 9201:9201
          - 9600:9600

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          coverage: pcov
          extensions: filter

      - name: Install Composer Dependencies
        uses: ramsey/composer-install@v3
        with:
          dependency-versions: ${{ matrix.dependencies }}
          composer-options: "--prefer-stable --optimize-autoloader --no-progress --no-interaction"

      - name: Setup storage
        run: ./tests/App/bin/setup_databases.sh
        env:
          DEF_DATABASE_URL: mysql://root:${{ secrets.CI_DATABASE_PASSWORD }}@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/default_db
          PERSISTENCE_DATABASE_URL: mysql://root:${{ secrets.CI_DATABASE_PASSWORD }}@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/persistence_db
          MONOLITHIC_DATABASE_URL: mysql://root:${{ secrets.CI_DATABASE_PASSWORD }}@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/monolithic_db
          ELASTICSEARCH_URL: http://localhost:9200
          OPENSEARCH_URL: http://localhost:9201
          DATABASE_SERVER_VERSION: ${{ matrix.mysql-version }}

      - name: Run PHPUnit
        env:
          DEF_DATABASE_URL: mysql://root:${{ secrets.CI_DATABASE_PASSWORD }}@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/default_db
          PERSISTENCE_DATABASE_URL: mysql://root:${{ secrets.CI_DATABASE_PASSWORD }}@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/persistence_db
          MONOLITHIC_DATABASE_URL: mysql://root:${{ secrets.CI_DATABASE_PASSWORD }}@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/monolithic_db
          ELASTICSEARCH_URL: http://localhost:9200
          OPENSEARCH_URL: http://localhost:9201
          DATABASE_SERVER_VERSION: ${{ matrix.mysql-version }}
        run: |
          vendor/bin/phpunit --colors=always --testdox \
            --log-junit tests/.results/tests-junit.xml \
            --coverage-clover tests/.results/tests-clover.xml

      - name: Upload coverage files
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.job }}-${{ matrix.php-version }}-${{ matrix.dependencies }}-coverage
          include-hidden-files: true
          path: tests/.results/

  sonarcloud:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          name: build-8.3-highest-coverage
          path: tests/.results/

      - name: Fix Code Coverage Paths
        working-directory: tests/.results/
        run: |
          sed -i 's@'$GITHUB_WORKSPACE'@/github/workspace/@g' tests-clover.xml
          sed -i 's@'$GITHUB_WORKSPACE'@/github/workspace/@g' tests-junit.xml

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.3.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
